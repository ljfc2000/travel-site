The BEM way, would tell us to select that <h1> element and give it a specific class name of:

	<h1 class="large-hero__title"></h1> 
and then in our CSS, we would select it like this:

	.large-hero__title {

	}											

What Does BEM stand for?
========================
First off BEM is a popular abstract way of thinking about our interface														             
		B : Block
		A block is an independent reusable part of our design.

		E : Element
		An element belongs to a block. It cannot be used outside
		of the block that it belongs to.

		M : Modifier
		A modifier can be used on a block or an element to indicate
		a change to the default state of an Object.



BEM Overview
=============
-CSS selectors should target elements directly with classes, instead of relying on generic type selectors, descendent selectors, and the cascade. Somewhat we are eleminating the 'C' from CSS

-Since we are limiting the Cascade, we are free to move blocks around and reuse them throughout the page.

-Blocks can be nested inside of other blocks.

-The idea is to Identify patterns in our design, and then create a single-responsibility blocks. For instance we can notice the multiple columns on our Page. So column is a pattern that we have identified in our design, and there is no reason to code a pattern more than once.

-BEM makes the relationship between our HTML and our CSS crystal Clear.

-This BEM stuff is all well and good, but what about the semantics of our HTML?
-Is adding all of these extra classes with presentational names making our HTML less semantic?
-The answer is: NO
-Nicolas Gallagher: creator of Normalize.css says about HTML semantics and Fron-end architecture:

	-- "Class names cannot be unsemantic"
	-- "Content-layer semantics are already served by HTML elements..."
	-- "Class names impart little or useful semantic information to machines or human visitors..."
	-- "The primary purpose of a class name is to be a hook for CSS and JavaScript"
	-- "Class names should communicate useful information to developers..."


Back to our CSS file, we want to make that title 'Blue and Large' right?

.large-hero__title {
	font-weight: 300;
	color: #2f5572;
	font-size: 4.8rem;
}
Save the File and refresh the browser....Looks good!
Now let's take care of the 'One Trip away' <h2> header, and let's give it a class name of
<h2 class="large-hero__subtitle"></h2> 

large-hero is the block
subtitle is the element 

and then go into our CSS file to write our Code, by only changing the font size to be a bit smaller:

.large-hero__subtitle {
	font-weight: 300;
	color: #2f5572;
	font-size: 2.9rem;
}




Rules to Follow for Creating class names and Writing Nested CSS selectors
**************************************************************************

Under the Main block 'large-hero' we nest each anc every single element with & (an ampersand symbol): 

.large-hero {
	position: relative;

	&__text_content {
	position : absolute;
	top: 50%;
	transform: translateY(-50%);
	left: 0;
	width: 100%;
	text-align: center;
 }

	&__title {
	font-weight: 300;
	color: #2f5572;
	font-size: 4.8rem;
 }

	&__subtitle {
	font-weight: 300;
	color: #2f5572;
	font-size: 2.9rem;
 }

}

Now that we speak the same BEM language, we can see how our Code is well Organized.
